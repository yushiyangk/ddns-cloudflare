#!/usr/bin/env bash

# Update Cloudflare DNS using this server's public IP address
# Requires curl, findutils, jq
# Usage: ddns-cloudflare [-qh] [options]
#
# Yu Shiyang <yu.shiyang@gnayihs.uy>

# List of domains to update is given in /etc/opt/ddns-cloudflare/domains in this format:
#   domains='example.com', 'subdomain.example.com', '*.wildcard.example.com'
#
# Authentication information for Cloudflare is given in /etc/opt/ddns-cloudflare/auth in this format:
#   zoneid=zoneid
#   authtoken=authtoken
#
# Values may optionally be enclosed in single or double quotes

name="ddns-cloudflare"

help="Usage: ddns-cloudflare [-qh] [options]\n"
help="$help\nOptions:"
help="$help\n  -q, --quiet     Use once to disable printing unchanged domains to stdout"
help="$help\n                  Use twice to disable printing all status to stdout status"
help="$help\n                  Error messages will always be printed to stderr"
help="$help\n  -w <time>, --warn=<time>, --warn-after=<time>"
help="$help\n                  Do not print to stderr for DNS update failures unless it has failed consistently for the period of <time>"
help="$help\n  -h, -?, --help  Display this help message and exit"

quiet=0
warnafter=

while [ $# -gt 0 ]; do
	case "$1" in
		--help)
			echo -e "$help"
			exit 0
			;;
		--quiet) ((++quiet)) ;;
		--warn*)
			case "$1" in
				*=*) warnafter="${1#*=}" ;;
				*)
					case "$2" in
						-*) ;;
						*)
							warnafter="$2"
							shift
					esac
			esac
			if [ -z "$warnafter" ]; then
				echo "$name: missing required argument for option '$1'" >& 2
				exit 2
			fi
			;;
		--*)
			echo "$name: invalid option '$1'" >& 2
			exit 2
			;;
		-*)
			for i in $(seq 1 $((${#1} - 1))); do
				flag="${1:$i:1}"
				case "$flag" in
					h|\?)
						echo -e "$help"
						exit 0
						;;
					q) ((++quiet)) ;;
					w)
						warnafter="${1:$((i + 1))}"
						if [ -z "$warnafter" ]; then
							case "$2" in
								-*) ;;
								*)
									warnafter="$2"
									shift
							esac
						fi
						if [ -z "$warnafter" ]; then
							echo "$name: missing required argument for option '$flag'" >& 2
							exit 2
						fi
						break
						;;
					*)
						echo "$name: invalid option '$flag'" >& 2
						exit 2
				esac
			done
			;;
		*)
			echo "$name: invalid argument '$1'" >& 2
			exit 2
	esac
	shift
done


export DDNS_CLOUDFLARE_DIR='/etc/opt/ddns-cloudflare'

# auth
zoneid="$( sed -n "s/^\s*zoneid\s*=\s*\(.\+\)/\1/p" "$DDNS_CLOUDFLARE_DIR/auth" | xargs -n 1 )"
authtoken="$( sed -n "s/^\s*authtoken\s*=\s*\(.\+\)/\1/p" "$DDNS_CLOUDFLARE_DIR/auth" | xargs -n 1 )"
# domains
IFS=$'\n' names=( $( sed -n "s/^\s*domains\s*=\s*\(.\+\)/\1/p" "$DDNS_CLOUDFLARE_DIR/domains" | xargs -d ',' -n 1 | xargs -l ) )

unset DDNS_CLOUDFLARE_DIR


publicip="$( curl -s checkip.dyndns.org | cut -d ':' -f 2 | cut -d '<' -f 1 | cut -d ' ' -f 2 )"

if [ -z "$publicip" ]; then
	error=1
	if [ -z "$warnafter" ]; then
		echo "$name: failed to detect IP address" >& 2
	else
		if [ -f /tmp/ddns-cloudflare.first-error ]; then
			if [ $(date -d -"$warnafter" +%s) -gt $(cat /tmp/ddns-cloudflare.first-error) ]; then
				echo "$name: failed to detect IP address" >& 2
				echo "$name: failing since $(date -d -"$warnafter" -R)" >& 2
			fi
		else
			date +%s > /tmp/ddns-cloudflare.first-error
		fi
	fi
	exit 1
else
	if [ $quiet -le 0 ]; then
		echo -e "Detected IP address from \e[94mcheckip.dyndns.org\e[39m: \e[97m$publicip\e[39m"
	fi
fi


error=0
delayederrorprint=0
for i in "${names[@]}"; do
	response="$( curl -s -X GET 'https://api.cloudflare.com/client/v4/zones/'"$zoneid"'/dns_records?type=A&name='"${i}" -H 'Content-Type:application/json' -H 'Authorization: Bearer '"$authtoken" )"
	recordip="$( echo "$response" | jq -Mr '.result[0].content' )"
	if [ "$recordip" != "$publicip" ]; then
		recordid="$( echo "$response" | jq -Mr '.result[0].id' )"
		recordttl="$( echo "$response" | jq -Mr '.result[0].ttl' )"
		recordproxied="$( echo "$response" | jq -Mr '.result[0].proxied' )"
		code="$( curl -s -o /tmp/ddns-cloudflare.response -w '%{http_code}' -X PUT 'https://api.cloudflare.com/client/v4/zones/'"$zoneid"'/dns_records/'"$recordid" -H 'Content-Type:application/json' -H 'Authorization: Bearer '"$authtoken" --data '{"type":"A","name":"'"${i}"'","content":"'"$publicip"'","ttl":'"$recordttl"',"proxied":'"$recordproxied"'}' )"
		if [ "$code" == 200 ]; then
			if [ $quiet -le 1 ]; then
				echo -e "200: \e[97m${i}\e[39m updated to $publicip"
			fi
			if [ -f /tmp/ddns-cloudflare.first-error ]; then
				rm /tmp/ddns-cloudflare.first-error
			fi
		else
			error=1
			if [ $quiet -le 1 ]; then
				echo -e "\e[31m$code: \e[97m${i}\e[31m failed to update\e[39m"
			fi
			if [ -z "$warnafter" ]; then
				echo -n "$name: " >& 2
				cat /tmp/ddns-cloudflare.response >& 2
			else
				if [ -f /tmp/ddns-cloudflare.first-error ]; then
					if [ $(date -d -"$warnafter" +%s) -gt $(cat /tmp/ddns-cloudflare.first-error) ]; then
						echo -n "$name: " >& 2
						cat /tmp/ddns-cloudflare.response >& 2
						echo "" >& 2
						delayederrorprint=1
					fi
				else
					date +%s > /tmp/ddns-cloudflare.first-error
				fi
			fi
		fi
		rm /tmp/ddns-cloudflare.response
	else
		if [ $quiet -le 0 ]; then
			echo -e "\e[97m${i}\e[39m unchanged; skipped"
		fi
	fi
done

if [ $delayederrorprint -ne 0 ]; then
	echo "$name: failing since $(date -d -"$warnafter" -R)" >& 2
fi
if [ $error -ne 0 ]; then
	exit 1
else
	if [ -f /tmp/ddns-cloudflare.first-error ]; then
		rm /tmp/ddns-cloudflare.first-error
	fi
fi
